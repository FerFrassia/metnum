A:
1 2 0 0 0 0
0 3 0 4 0 0
0 0 5 6 7 0
0 8 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 9

A =  [1 2 3 4 5 6 7 8 9]
    _ 0 1 2 3 4 5 6 7 8
JA = [0 1 1 3 2 3 4 1 5]
IA = [0 2 4 7 8 8 9]

I:
1 0 0 0 0 0
0 1 0 0 0 0
0 0 1 0 0 0
0 0 0 1 0 0
0 0 0 0 1 0
0 0 0 0 0 1


B: I - A
0 -2  0  0  0 0
0 -2  0 -4  0 0
0  0 -4 -6 -7 0
0 -8  0  1  0 0
0  0  0  0  1 0
0  0  0  0  0 1

B:  [-2 -2 -4 -4 -6 -7 -8 1 1 1]
    _ 0  1  2  3  4  5  6 7 8 9
JB: [ 1  1  3  2  3  4  1 3 4 5]
IB: [ 0  1  3  6  8 9 10]



p = 1
WD_ii = 1
w_ii


0 1 1 1 0
0 0 0 0 0
3 0 0 3 0
4 4 4 0 0
5 5 5 5 0

A =  [1 1 1 3 3 4 4 4 5 5  5  5]
     _0 1 2 3 4 5 6 7 8 9 10 11
JA = [1 2 3 0 3 0 1 2 0 1  2  3]
IA = [0 3 3 5 8 12]

[1]: [3] -> [4] -> [5] ->
[2]: [1] -> [4] -> [5] ->
[3]: [1] -> [4] -> [5] ->
[4]: [1] -> [3] -> [5] ->
[5]:


grados: [3 3 3 3 0]

[1]: [2] -> [3] -> [4]
[2]: []
[3]: [1] -> [4]
[4]: [1] -> [2] -> [3]
[5]: [1] -> [2] -> [3] -> [4]

[1]: [0] -> [2] -> [3] -> [4]

[2]:

[3]: [1] -> [4]

[4]: [1] -> [2] -> [3]

[5]: [1] -> [2] -> [3] -> [4]


Vamos a usar map<int, map<int, int>> para la matriz W, pagamos el costo incial y listo
Para almacenar los grados, vamos leyendo y sumando en un vector donde cada columna es el grado

[1]: [4] ->
[2]:
[3]:
[4]: [3] -> [1] ->
[5]: [1] ->
